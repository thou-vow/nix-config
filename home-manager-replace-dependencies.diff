diff --git a/modules/home-environment.nix b/modules/home-environment.nix
index a562047b..9973821e 100644
--- a/modules/home-environment.nix
+++ b/modules/home-environment.nix
@@ -3,9 +3,7 @@
   lib,
   pkgs,
   ...
-}:
-
-let
+}: let
   inherit (lib) literalExpression mkOption types;
 
   inherit (config.home) stateVersion;
@@ -109,7 +107,6 @@ let
           The language to use for measurement values.
         '';
       };
-
     };
   };
 
@@ -117,7 +114,10 @@ let
     options = {
       layout = mkOption {
         type = with types; nullOr str;
-        default = if lib.versionAtLeast config.home.stateVersion "19.09" then null else "us";
+        default =
+          if lib.versionAtLeast config.home.stateVersion "19.09"
+          then null
+          else "us";
         defaultText = literalExpression "null";
         description = ''
           Keyboard layout. If `null`, then the system
@@ -139,7 +139,7 @@ let
 
       options = mkOption {
         type = types.listOf types.str;
-        default = [ ];
+        default = [];
         example = [
           "grp:caps_toggle"
           "grp_led:scroll"
@@ -151,7 +151,10 @@ let
 
       variant = mkOption {
         type = with types; nullOr str;
-        default = if lib.versionAtLeast config.home.stateVersion "19.09" then null else "";
+        default =
+          if lib.versionAtLeast config.home.stateVersion "19.09"
+          then null
+          else "";
         defaultText = literalExpression "null";
         example = "colemak";
         description = ''
@@ -164,14 +167,11 @@ let
       };
     };
   };
-
-in
-
-{
-  meta.maintainers = [ lib.maintainers.rycee ];
+in {
+  meta.maintainers = [lib.maintainers.rycee];
 
   imports = [
-    (lib.mkRemovedOptionModule [ "home" "sessionVariableSetter" ] ''
+    (lib.mkRemovedOptionModule ["home" "sessionVariableSetter"] ''
       Session variables are now always set through the shell. This is
       done automatically if the shell configuration is managed by Home
       Manager. If not, then you must source the
@@ -218,13 +218,16 @@ in
 
     home.language = mkOption {
       type = languageSubModule;
-      default = { };
+      default = {};
       description = "Language configuration.";
     };
 
     home.keyboard = mkOption {
       type = types.nullOr keyboardSubModule;
-      default = if lib.versionAtLeast stateVersion "21.11" then null else { };
+      default =
+        if lib.versionAtLeast stateVersion "21.11"
+        then null
+        else {};
       defaultText = literalExpression ''
         "{ }"  for state version < 21.11,
         "null" for state version â‰¥ 21.11
@@ -237,7 +240,7 @@ in
 
     home.shellAliases = mkOption {
       type = with types; attrsOf str;
-      default = { };
+      default = {};
       example = literalExpression ''
         {
           g = "git";
@@ -256,9 +259,8 @@ in
     };
 
     home.sessionVariables = mkOption {
-      default = { };
-      type =
-        with types;
+      default = {};
+      type = with types;
         lazyAttrsOf (oneOf [
           str
           path
@@ -314,7 +316,7 @@ in
 
     home.sessionPath = mkOption {
       type = with types; listOf str;
-      default = [ ];
+      default = [];
       example = [
         "$HOME/.local/bin"
         "\${xdg.configHome}/emacs/bin"
@@ -332,7 +334,7 @@ in
     };
 
     home.sessionSearchVariables = mkOption {
-      default = { };
+      default = {};
       type = with types; attrsOf (listOf str);
       example = {
         MANPATH = [
@@ -364,13 +366,13 @@ in
 
     home.packages = mkOption {
       type = types.listOf types.package;
-      default = [ ];
+      default = [];
       description = "The set of packages to appear in the user environment.";
     };
 
     home.extraOutputsToInstall = mkOption {
       type = types.listOf types.str;
-      default = [ ];
+      default = [];
       example = [
         "doc"
         "info"
@@ -385,7 +387,7 @@ in
 
     home.extraDependencies = mkOption {
       type = types.listOf types.pathInStore;
-      default = [ ];
+      default = [];
       description = ''
         A list of paths that should be included in the home
         closure but generally not visible.
@@ -396,9 +398,50 @@ in
       '';
     };
 
+    home.replaceDependencies = {
+      replacements = mkOption {
+        default = [];
+        type = types.listOf (
+          types.submodule (
+            {...}: {
+              options.oldDependency = mkOption {
+                type = types.package;
+                description = "The original package to override.";
+              };
+
+              options.newDependency = mkOption {
+                type = types.package;
+                description = "The replacement package.";
+              };
+            }
+          )
+        );
+        apply = map (
+          {
+            oldDependency,
+            newDependency,
+            ...
+          }: {
+            inherit oldDependency newDependency;
+          }
+        );
+        description = ''
+          List of packages to override without doing a full rebuild.
+          The original derivation and replacement derivation must have the same
+          name length, and ideally should have close-to-identical directory layout.
+        '';
+      };
+
+      cutoffPackages = mkOption {
+        default = [];
+        type = types.listOf types.package;
+        description = "Packages to which no replacements should be applied.";
+      };
+    };
+
     home.checks = mkOption {
       type = types.listOf types.package;
-      default = [ ];
+      default = [];
       description = ''
         Packages that are added as dependencies of the home's build, usually
         for the purpose of validating some part of the configuration.
@@ -432,7 +475,7 @@ in
 
     home.activation = mkOption {
       type = lib.hm.types.dagOf types.str;
-      default = { };
+      default = {};
       example = literalExpression ''
         {
           myActivationAction = lib.hm.dag.entryAfter ["writeBoundary"] '''
@@ -508,7 +551,7 @@ in
     home.extraActivationPath = mkOption {
       internal = true;
       type = types.listOf types.package;
-      default = [ ];
+      default = [];
       description = ''
         Extra packages to add to {env}`PATH` within the activation
         script.
@@ -548,11 +591,13 @@ in
       '';
     };
 
-    home.preferXdgDirectories = lib.mkEnableOption "" // {
-      description = ''
-        Whether to make programs use XDG directories whenever supported.
-      '';
-    };
+    home.preferXdgDirectories =
+      lib.mkEnableOption ""
+      // {
+        description = ''
+          Whether to make programs use XDG directories whenever supported.
+        '';
+      };
   };
 
   config = {
@@ -567,12 +612,11 @@ in
       }
     ];
 
-    warnings =
-      let
-        hmRelease = config.home.version.release;
-        nixpkgsRelease = lib.trivial.release;
-        releaseMismatch = config.home.enableNixpkgsReleaseCheck && hmRelease != nixpkgsRelease;
-      in
+    warnings = let
+      hmRelease = config.home.version.release;
+      nixpkgsRelease = lib.trivial.release;
+      releaseMismatch = config.home.enableNixpkgsReleaseCheck && hmRelease != nixpkgsRelease;
+    in
       lib.optional releaseMismatch ''
         You are using
 
@@ -598,22 +642,20 @@ in
     );
 
     home.profileDirectory =
-      if config.submoduleSupport.enable && config.submoduleSupport.externalPackageInstall then
-        "/etc/profiles/per-user/${cfg.username}"
-      else if config.nix.enable && (config.nix.settings.use-xdg-base-directories or false) then
-        "${config.xdg.stateHome}/nix/profile"
-      else
-        cfg.homeDirectory + "/.nix-profile";
+      if config.submoduleSupport.enable && config.submoduleSupport.externalPackageInstall
+      then "/etc/profiles/per-user/${cfg.username}"
+      else if config.nix.enable && (config.nix.settings.use-xdg-base-directories or false)
+      then "${config.xdg.stateHome}/nix/profile"
+      else cfg.homeDirectory + "/.nix-profile";
 
     programs.bash.shellAliases = cfg.shellAliases;
     programs.zsh.shellAliases = cfg.shellAliases;
     programs.fish.shellAliases = cfg.shellAliases;
     programs.nushell.shellAliases = cfg.shellAliases;
 
-    home.sessionVariables =
-      let
-        maybeSet = n: v: lib.optionalAttrs (v != null) { ${n} = v; };
-      in
+    home.sessionVariables = let
+      maybeSet = n: v: lib.optionalAttrs (v != null) {${n} = v;};
+    in
       (maybeSet "LANG" cfg.language.base)
       // (maybeSet "LC_CTYPE" cfg.language.ctype)
       // (maybeSet "LC_NUMERIC" cfg.language.numeric)
@@ -631,25 +673,27 @@ in
     home.sessionVariablesPackage = pkgs.writeTextFile {
       name = "hm-session-vars.sh";
       destination = "/etc/profile.d/hm-session-vars.sh";
-      text = ''
-        # Only source this once.
-        if [ -n "$__HM_SESS_VARS_SOURCED" ]; then return; fi
-        export __HM_SESS_VARS_SOURCED=1
+      text =
+        ''
+          # Only source this once.
+          if [ -n "$__HM_SESS_VARS_SOURCED" ]; then return; fi
+          export __HM_SESS_VARS_SOURCED=1
 
-        ${config.lib.shell.exportAll cfg.sessionVariables}
-      ''
-      + lib.concatStringsSep "\n" (
-        lib.mapAttrsToList (
-          env: values: config.lib.shell.export env (config.lib.shell.prependToVar ":" env values)
-        ) cfg.sessionSearchVariables
-      )
-      + "\n"
-      + cfg.sessionVariablesExtra;
+          ${config.lib.shell.exportAll cfg.sessionVariables}
+        ''
+        + lib.concatStringsSep "\n" (
+          lib.mapAttrsToList (
+            env: values: config.lib.shell.export env (config.lib.shell.prependToVar ":" env values)
+          )
+          cfg.sessionSearchVariables
+        )
+        + "\n"
+        + cfg.sessionVariablesExtra;
     };
 
-    home.sessionSearchVariables.PATH = lib.mkIf (cfg.sessionPath != [ ]) cfg.sessionPath;
+    home.sessionSearchVariables.PATH = lib.mkIf (cfg.sessionPath != []) cfg.sessionPath;
 
-    home.packages = [ config.home.sessionVariablesPackage ];
+    home.packages = [config.home.sessionVariablesPackage];
 
     # The entry acting as a boundary between the activation script's "check" and
     # the "write" phases. This is where we commit to attempting to actually
@@ -682,86 +726,81 @@ in
     # In case the user has moved from a user-install of Home Manager
     # to a submodule managed one we attempt to uninstall the
     # `home-manager-path` package if it is installed.
-    home.activation.installPackages = lib.hm.dag.entryAfter [ "writeBoundary" ] (
-      if config.submoduleSupport.externalPackageInstall then
-        ''
-          nixProfileRemove home-manager-path
-        ''
-      else
-        ''
-          function nixReplaceProfile() {
-            local oldNix="$(command -v nix)"
+    home.activation.installPackages = lib.hm.dag.entryAfter ["writeBoundary"] (
+      if config.submoduleSupport.externalPackageInstall
+      then ''
+        nixProfileRemove home-manager-path
+      ''
+      else ''
+        function nixReplaceProfile() {
+          local oldNix="$(command -v nix)"
 
-            nixProfileRemove 'home-manager-path'
+          nixProfileRemove 'home-manager-path'
 
-            run $oldNix profile install $1
-          }
+          run $oldNix profile install $1
+        }
 
-          if [[ -e ${cfg.profileDirectory}/manifest.json ]] ; then
-            INSTALL_CMD="nix profile install"
-            INSTALL_CMD_ACTUAL="nixReplaceProfile"
-            LIST_CMD="nix profile list"
-            REMOVE_CMD_SYNTAX='nix profile remove {number | store path}'
-          else
-            INSTALL_CMD="nix-env -i"
-            INSTALL_CMD_ACTUAL="run nix-env -i"
-            LIST_CMD="nix-env -q"
-            REMOVE_CMD_SYNTAX='nix-env -e {package name}'
-          fi
+        if [[ -e ${cfg.profileDirectory}/manifest.json ]] ; then
+          INSTALL_CMD="nix profile install"
+          INSTALL_CMD_ACTUAL="nixReplaceProfile"
+          LIST_CMD="nix profile list"
+          REMOVE_CMD_SYNTAX='nix profile remove {number | store path}'
+        else
+          INSTALL_CMD="nix-env -i"
+          INSTALL_CMD_ACTUAL="run nix-env -i"
+          LIST_CMD="nix-env -q"
+          REMOVE_CMD_SYNTAX='nix-env -e {package name}'
+        fi
 
-          if ! $INSTALL_CMD_ACTUAL ${cfg.path} ; then
-            echo
-            _iError $'Oops, Nix failed to install your new Home Manager profile!\n\nPerhaps there is a conflict with a package that was installed using\n"%s"? Try running\n\n    %s\n\nand if there is a conflicting package you can remove it with\n\n    %s\n\nThen try activating your Home Manager configuration again.' "$INSTALL_CMD" "$LIST_CMD" "$REMOVE_CMD_SYNTAX"
-            exit 1
-          fi
-          unset -f nixReplaceProfile
-          unset INSTALL_CMD INSTALL_CMD_ACTUAL LIST_CMD REMOVE_CMD_SYNTAX
-        ''
+        if ! $INSTALL_CMD_ACTUAL ${cfg.path} ; then
+          echo
+          _iError $'Oops, Nix failed to install your new Home Manager profile!\n\nPerhaps there is a conflict with a package that was installed using\n"%s"? Try running\n\n    %s\n\nand if there is a conflicting package you can remove it with\n\n    %s\n\nThen try activating your Home Manager configuration again.' "$INSTALL_CMD" "$LIST_CMD" "$REMOVE_CMD_SYNTAX"
+          exit 1
+        fi
+        unset -f nixReplaceProfile
+        unset INSTALL_CMD INSTALL_CMD_ACTUAL LIST_CMD REMOVE_CMD_SYNTAX
+      ''
     );
 
     # Text containing Bash commands that will initialize the Home Manager Bash
     # library. Most importantly, this will prepare for using translated strings
     # in the `hm-modules` text domain.
-    lib.bash.initHomeManagerLib =
-      let
-        domainDir =
-          pkgs.runCommand "hm-modules-messages"
-            {
-              nativeBuildInputs = [ pkgs.buildPackages.gettext ];
-            }
-            ''
-              for path in ${./po}/*.po; do
-                lang="''${path##*/}"
-                lang="''${lang%%.*}"
-                mkdir -p "$out/$lang/LC_MESSAGES"
-                msgfmt -o "$out/$lang/LC_MESSAGES/hm-modules.mo" "$path"
-              done
-            '';
-      in
-      ''
-        export TEXTDOMAIN=hm-modules
-        export TEXTDOMAINDIR=${domainDir}
-        source ${../lib/bash/home-manager.sh}
-      '';
-
-    home.activationPackage =
-      let
-        mkCmd = res: ''
-          _iNote "Activating %s" "${res.name}"
-          ${res.data}
+    lib.bash.initHomeManagerLib = let
+      domainDir =
+        pkgs.runCommand "hm-modules-messages"
+        {
+          nativeBuildInputs = [pkgs.buildPackages.gettext];
+        }
+        ''
+          for path in ${./po}/*.po; do
+            lang="''${path##*/}"
+            lang="''${lang%%.*}"
+            mkdir -p "$out/$lang/LC_MESSAGES"
+            msgfmt -o "$out/$lang/LC_MESSAGES/hm-modules.mo" "$path"
+          done
         '';
-        sortedCommands = lib.hm.dag.topoSort cfg.activation;
-        activationCmds =
-          if sortedCommands ? result then
-            lib.concatStringsSep "\n" (map mkCmd sortedCommands.result)
-          else
-            abort ("Dependency cycle in activation script: " + builtins.toJSON sortedCommands);
-
-        # Programs that always should be available on the activation
-        # script's PATH.
-        activationBinPaths =
-          lib.makeBinPath (
-            with pkgs;
+    in ''
+      export TEXTDOMAIN=hm-modules
+      export TEXTDOMAINDIR=${domainDir}
+      source ${../lib/bash/home-manager.sh}
+    '';
+
+    home.activationPackage = let
+      mkCmd = res: ''
+        _iNote "Activating %s" "${res.name}"
+        ${res.data}
+      '';
+      sortedCommands = lib.hm.dag.topoSort cfg.activation;
+      activationCmds =
+        if sortedCommands ? result
+        then lib.concatStringsSep "\n" (map mkCmd sortedCommands.result)
+        else abort ("Dependency cycle in activation script: " + builtins.toJSON sortedCommands);
+
+      # Programs that always should be available on the activation
+      # script's PATH.
+      activationBinPaths =
+        lib.makeBinPath (
+          with pkgs;
             [
               bash
               coreutils
@@ -774,87 +813,87 @@ in
               ncurses # For `tput`.
             ]
             ++ config.home.extraActivationPath
-          )
-          + (
-            # Add path of the Nix binaries, if a Nix package is configured, then
-            # use that one, otherwise grab the path of the nix-env tool.
-            if config.nix.enable && config.nix.package != null then
-              ":${config.nix.package}/bin"
-            else
-              ":$(${pkgs.coreutils}/bin/dirname $(${pkgs.coreutils}/bin/readlink -m $(type -p nix-env)))"
-          )
-          + lib.optionalString (!cfg.emptyActivationPath) "\${PATH:+:}$PATH";
-
-        activationScript = pkgs.writeShellScript "activation-script" ''
-          set -eu
-          set -o pipefail
-
-          cd $HOME
-
-          export PATH="${activationBinPaths}"
-          ${config.lib.bash.initHomeManagerLib}
-
-          # The driver version indicates the behavior expected by the caller of
-          # this script.
-          #
-          # - 0 : legacy behavior
-          # - 1 : the script will not attempt to update the Home Manager Nix profile.
-          hmDriverVersion=0
-
-          while (( $# > 0 )); do
-            opt="$1"
-            shift
-
-            case $opt in
-              --driver-version)
-                if (( $# == 0 )); then
-                  errorEcho "$0: no driver version specified" >&2
-                  exit 1
-                elif (( 0 <= $1 && $1 <= 1 )); then
-                  hmDriverVersion=$1
-                else
-                  errorEcho "$0: unexpected driver version $1" >&2
-                  exit 1
-                fi
-                shift
-                ;;
-              *)
-                _iError "%s: unknown option '%s'" "$0" "$opt" >&2
+        )
+        + (
+          # Add path of the Nix binaries, if a Nix package is configured, then
+          # use that one, otherwise grab the path of the nix-env tool.
+          if config.nix.enable && config.nix.package != null
+          then ":${config.nix.package}/bin"
+          else ":$(${pkgs.coreutils}/bin/dirname $(${pkgs.coreutils}/bin/readlink -m $(type -p nix-env)))"
+        )
+        + lib.optionalString (!cfg.emptyActivationPath) "\${PATH:+:}$PATH";
+
+      activationScript = pkgs.writeShellScript "activation-script" ''
+        set -eu
+        set -o pipefail
+
+        cd $HOME
+
+        export PATH="${activationBinPaths}"
+        ${config.lib.bash.initHomeManagerLib}
+
+        # The driver version indicates the behavior expected by the caller of
+        # this script.
+        #
+        # - 0 : legacy behavior
+        # - 1 : the script will not attempt to update the Home Manager Nix profile.
+        hmDriverVersion=0
+
+        while (( $# > 0 )); do
+          opt="$1"
+          shift
+
+          case $opt in
+            --driver-version)
+              if (( $# == 0 )); then
+                errorEcho "$0: no driver version specified" >&2
                 exit 1
-                ;;
-            esac
-          done
-          unset opt
-
-          ${builtins.readFile ./lib-bash/activation-init.sh}
+              elif (( 0 <= $1 && $1 <= 1 )); then
+                hmDriverVersion=$1
+              else
+                errorEcho "$0: unexpected driver version $1" >&2
+                exit 1
+              fi
+              shift
+              ;;
+            *)
+              _iError "%s: unknown option '%s'" "$0" "$opt" >&2
+              exit 1
+              ;;
+          esac
+        done
+        unset opt
+
+        ${builtins.readFile ./lib-bash/activation-init.sh}
+
+        if [[ ! -v SKIP_SANITY_CHECKS ]]; then
+          checkUsername ${lib.escapeShellArg config.home.username}
+          checkHomeDirectory ${lib.escapeShellArg config.home.homeDirectory}
+        fi
 
-          if [[ ! -v SKIP_SANITY_CHECKS ]]; then
-            checkUsername ${lib.escapeShellArg config.home.username}
-            checkHomeDirectory ${lib.escapeShellArg config.home.homeDirectory}
-          fi
+        ${lib.optionalString config.home.activationGenerateGcRoot ''
+          # Create a temporary GC root to prevent collection during activation.
+          trap 'run rm -f $VERBOSE_ARG "$newGenGcPath"' EXIT
+          run --silence nix-store --realise "$newGenPath" --add-root "$newGenGcPath"
+        ''}
 
-          ${lib.optionalString config.home.activationGenerateGcRoot ''
-            # Create a temporary GC root to prevent collection during activation.
-            trap 'run rm -f $VERBOSE_ARG "$newGenGcPath"' EXIT
-            run --silence nix-store --realise "$newGenPath" --add-root "$newGenGcPath"
-          ''}
+        ${activationCmds}
 
-          ${activationCmds}
+        ${lib.optionalString (config.home.activationGenerateGcRoot && !config.uninstall) ''
+          # Create the "current generation" GC root.
+          run --silence nix-store --realise "$newGenPath" --add-root "$currentGenGcPath"
 
-          ${lib.optionalString (config.home.activationGenerateGcRoot && !config.uninstall) ''
-            # Create the "current generation" GC root.
-            run --silence nix-store --realise "$newGenPath" --add-root "$currentGenGcPath"
+          if [[ -e "$legacyGenGcPath" ]]; then
+            run rm $VERBOSE_ARG "$legacyGenGcPath"
+          fi
+        ''}
+      '';
 
-            if [[ -e "$legacyGenGcPath" ]]; then
-              run rm $VERBOSE_ARG "$legacyGenGcPath"
-            fi
-          ''}
-        '';
-      in
-      pkgs.runCommand "home-manager-generation"
+      package =
+        pkgs.runCommand "home-manager-generation"
         {
           preferLocalBuild = true;
-          passAsFile = [ "extraDependencies" ];
+          passAsFile = ["extraDependencies"];
           inherit (config.home) extraDependencies;
 
           # Not actually used in the builder. `passedChecks` is just here to create
@@ -892,6 +931,21 @@ in
           ${cfg.extraBuilderCommands}
         '';
 
+      inherit (cfg.replaceDependencies) replacements cutoffPackages;
+    in
+      if replacements == []
+      then package
+      else
+        (pkgs.replaceDependencies.override {
+          replaceDirectDependencies = pkgs.replaceDirectDependencies.override {
+            nix = config.nix.package;
+          };
+        })
+        {
+          drv = package;
+          inherit replacements cutoffPackages;
+        };
+
     home.path = pkgs.buildEnv {
       name = "home-manager-path";
 
